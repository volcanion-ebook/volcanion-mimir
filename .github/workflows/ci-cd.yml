name: CI/CD Pipeline

on:
  pull_request:
    branches: [master, staging, develop]
  push:
    branches: [master, staging, develop]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: TypeScript type checking
        run: yarn type-check
        
      - name: ESLint code linting
        run: yarn lint
        
      - name: Check code formatting
        run: |
          yarn prettier --check "src/**/*.{ts,tsx,js,jsx}"

  # Job 2: Unit Tests
  tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run unit tests with coverage
        run: yarn test:ci
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # Job 3: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run security audit
        run: yarn audit --level moderate
        
      - name: Run dependency vulnerability check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # Job 4: Build Android
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [tests, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x android/gradlew
        
      - name: Build Android Debug APK
        run: |
          cd android
          ./gradlew assembleDebug
          
      - name: Upload Android APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 30

  # Job 5: Build iOS (only on macOS)
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [tests, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
          
      - name: Build iOS app
        run: |
          xcodebuild -workspace ios/VolcanionEbook.xcworkspace \
            -scheme VolcanionEbook \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -derivedDataPath ios/build \
            build
            
      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug-build
          path: ios/build/Build/Products/Debug-iphonesimulator/
          retention-days: 30

  # Job 6: Deployment (only on push to specific branches)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/master' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk
          path: ./artifacts/android/
          
      - name: Download iOS build
        uses: actions/download-artifact@v4
        with:
          name: ios-debug-build
          path: ./artifacts/ios/
          
      - name: Deploy to Firebase App Distribution (Android)
        if: matrix.environment != 'production'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          groups: ${{ matrix.environment == 'staging' && 'testers,internal' || 'internal' }}
          file: ./artifacts/android/app-debug.apk
          releaseNotes: |
            Build from branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
      - name: Deploy to App Store Connect (Production iOS)
        if: matrix.environment == 'production'
        run: |
          echo "ðŸš€ Production deployment to App Store Connect would go here"
          echo "This requires additional setup with certificates and provisioning profiles"
          
      - name: Deploy to Google Play Console (Production Android)
        if: matrix.environment == 'production'
        run: |
          echo "ðŸš€ Production deployment to Google Play Console would go here"
          echo "This requires additional setup with signing keys and service accounts"
          
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
